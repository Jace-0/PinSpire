name: E2E Tests

on:
  push:
    branches: [main]
    paths:
      - "app/**"
      - ".github/workflows/e2e-tests.yml"

  pull_request:
    branches: [main]
    paths:
      - "app/**"
      - ".github/workflows/e2e-tests.yml"

  # Run after backend and frontend CI complete successfully
  workflow_run:
    workflows: ["Backend CI", "Frontend CI"]
    types:
      - completed

  # Allow manual triggering
  workflow_dispatch:

jobs:
  e2e-tests:
    runs-on: ubuntu-20.04
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pinspire_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      # Frontend setup with its own caching
      - name: Setup frontend npm cache
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./app/frontend/package-lock.json"

      - name: Install frontend dependencies
        working-directory: ./app/frontend
        run: npm install
        env:
          REACT_APP_API_URL: http://localhost:3000/api
          REACT_APP_WS_URL: ws://localhost:3000

      # Backend setup with its own caching
      - name: Setup backend npm cache
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./app/backend/package-lock.json"

      - name: Install backend dependencies
        working-directory: ./app/backend
        run: |
          npm install
          npm run build:ui:dev

      - name: Start backend server
        run: npm run start:test &
        working-directory: ./app/backend
        env:
          NODE_ENV: test
          TEST_POSTGRES_URL: postgres://postgres:postgres@localhost:5432/pinspire_test
          TEST_REDIS_URL: redis://localhost:6379
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REFRESH_SECRET: ${{ secrets.REFRESH_SECRET }}
          TEST_CLOUDINARY_CLOUD_NAME: ${{ secrets.TEST_CLOUDINARY_CLOUD_NAME}}
          TEST_CLOUDINARY_API_KEY: ${{ secrets.TEST_CLOUDINARY_API_KEY}}
          TEST_CLOUDINARY_API_SECRET: ${{ secrets.TEST_CLOUDINARY_API_SECRET}}
          PORT: 3000

      - name: Wait for backend to start
        run: |
          echo "Waiting for backend to start..."
          timeout=60
          while ! curl -s http://localhost:3000/api/health > /dev/null 2>&1; do
            if [ $timeout -le 0 ]; then
              echo "Backend failed to start"
              exit 1
            fi
            timeout=$(($timeout - 1))
            sleep 1
          done
          echo "Backend started successfully"

      - name: Setup E2E tests npm cache
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./app/e2e-tests/package-lock.json"

      - name: Install Playwright dependencies
        run: |
          npm install
          npx playwright install --with-deps chromium
        working-directory: ./app/e2e-tests

      - name: Setup test files
        run: |
          echo "Verifying test files directory..."

          # Check if directory exists
          if [ ! -d "./app/e2e-tests/tests/test-files" ]; then
            echo "Error: Test files directory not found!"
            ls -la ./app/e2e-tests/tests/
            exit 1
          fi

          echo "Current test files:"
          ls -la ./app/e2e-tests/tests/test-files/

          # Ensure correct case sensitivity in filenames
          # List all your expected test files
          expected_files=(
            "Jacket.jpeg"
            "Shot48.00000.png"
            "braids.jpeg"
            "profile.jpeg"
          )

          # Check each file
          for file in "${expected_files[@]}"; do
            if [ ! -f "./app/e2e-tests/tests/test-files/$file" ]; then
              echo "Warning: File $file not found!"
              echo "Available files:"
              ls -la ./app/e2e-tests/tests/test-files/
              exit 1
            fi
          done

          # Set proper permissions
          chmod 644 ./app/e2e-tests/tests/test-files/* || true

          echo "Test files verified successfully"

      - name: Run E2E tests
        run: npm run test:chrome
        working-directory: ./app/e2e-tests
        env:
          BASE_URL: http://localhost:3000

      - name: Upload test results
        if: failure() && steps.e2e_tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: ./app/e2e-tests/playwright-report/
          retention-days: 30

      # Deployment
      - name: Deploy to Render
        id: deploy
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && success() }}
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
        continue-on-error: true

      - name: Notify on deployment
        if: always()
        uses: Ilshidur/action-discord@0c4b27844ba47cb1c7bee539c8eead5284ce9fa9
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            üöÄ **Deployment Status Update**
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Status: ${{ (steps.deploy.outcome == 'success') && '‚úÖ Succeeded' || '‚ùå Failed' }}
            Environment: Production
            Deployed by: ${{ github.actor }}
            ${{ (steps.deploy.outcome == 'success') && 'üéâ Application is now live!' || '‚ö†Ô∏è Please check deployment logs for details.' }}

      # Cleanup
      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up processes..."
          pkill -f "npm run start:test" || true

  tag_release:
    needs: [e2e-tests] # This makes it wait for the first job
    runs-on: ubuntu-20.04
    # Use the same condition for version tagging
    if: ${{
      github.event_name == 'push' &&
      github.ref == 'refs/heads/main' &&
      !contains(join(github.event.commits.*.message, ' '), '#skip')}} # Only run on pushes to main
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0" # This ensures we get all git history for versioning

      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@f278d49d30cdd8775cc3e7dd00b5ee11686ee297
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEFAULT_BUMP: patch
          WITH_V: true
